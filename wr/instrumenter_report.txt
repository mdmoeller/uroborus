The module instrument.py is one of the core components of Uroborus. It's function is to instrument the source file with file writes and instrument only those lines of code that can get executed at run time. The instrumented code is then used in place of the original code for user generated tests. The file writes that get instrumented with the source lines enable uroborus to keep track of the lines that get executed during different runs/tests. A coverage file is generated as a result of the file writes in the instrumented file that keeps track of the lines that were executed in each run.

The challenge with instrumenting source files is when there are classes. The uroborus instrumenter takes care not to instrument class and function defs. Since python uses indentation to delimit blocks, the file writes. when being coupled with the lines have to be indented at the same level as the line being instrumented. Also, statements like else, catch are not instrumented.

Another feature of the instrument.py module is the way it handles line continuation in python. Since python allows a single statement to span many lines, the instrumenter is careful not to instrument in the middle of a statement.